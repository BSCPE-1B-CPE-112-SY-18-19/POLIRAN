? A data type defines a collection of data values and a set of predefined operations on those
values.
? Computer programs produce results by manipulating data.
? ALGOL 68 provided a few basic types and a few flexible structure-defining operators that
allow a programmer to design a data structure for each need.
? A descriptor is the collection of the attributes of a variable.
? In an implementation a descriptor is a collection of memory cells that store variable
attributes.
? If the attributes are static, descriptor are required only at compile time.
? These descriptors are built by the compiler, usually as a part of the symbol table, and are
used during compilation.
? For dynamic attributes, part or all of the descriptor must be maintained during execution.
? Descriptors are used for type checking and by allocation and deallocation operations.
6.2 Primitive Data Types 238
? Those not defined in terms of other data types are called primitive data types.
? Almost all programming languages provide a set of primitive data types.
? Some primitive data types are merely reflections of the hardware – for example, most integer
types.
? The primitive data types of a language are used, along with one or more type constructors.
6.2.1 Numeric Types
? Integer
– The most common primitive numeric data type is integer.
– The hardware of many computers supports several sizes of integers.
– These sizes of integers, and often a few others, are supported by some programming
languages.
– Java includes four signed integer sizes: byte, short, int, and long.
– C++ and C#, include unsigned integer types, which are types for integer values without
sings.
CMPS401 Class Notes (Chap06) Page 3 / 35 Dr. Kuo-pao Yang
? Floating-point
– Model real numbers, but only as approximations for most real values.
– On most computers, floating-point numbers are stored in binary, which exacerbates the
problem.
– Another problem is the loss of accuracy through arithmetic operations.
– Languages for scientific use support at least two floating-point types; sometimes more
(e.g. float, and double.)
– The collection of values that can be represented by a floating-point type is defined in
terms of precision and range.
– Precision: is the accuracy of the fractional part of a value, measured as the number of
bits. Figure below shows single and double precision.
– Range: is the range of fractions and exponents.
Figure 6.1 IEEE floating-point formats: (a) single precision, (b) double precision
? Complex
– Some languages support a complex type: e.g., Fortran and Python
– Each value consists of two floats: the real part and the imaginary part
– Literal form (in Python):
(7 + 3j)
where 7 is the real part and 3 is the imaginary part
? Decimal
– Most larger computers that are designed to support business applications have hardware
support for decimal data types
– Decimal types store a fixed number of decimal digits, with the decimal point at a fixed
position in the value
– These are the primary data types for business data processing and are therefore essential
to COBOL
– Advantage: accuracy of decimal values
– Disadvantages: limited range since no exponents are allowed, and its representation
wastes memory
CMPS401 Class Notes (Chap06) Page 4 / 35 Dr. Kuo-pao Yang
6.2.2 Boolean Types
? Boolean Types
– Introduced by ALGOL 60
– They are used to represent switched and flags in programs
– The use of Booleans enhances readability
– Range of values: two elements, one for “true” and one for “false”
– One popular exception is C89, in which numeric expressions are used as conditionals. In
such expressions, all operands with nonzero values are considered true, and zero is
considered false
– A Boolean value could be represented by a single bit, but often statured in the smallest
efficiently addressable cell of memory, typically a byte
6.2.3 Character Types
? Character Types
– Char types are stored as numeric codings (ASCII / Unicode)
– Traditionally, the most commonly used coding was the 8-bit code ASCII (American
Standard Code for Information Interchange)
– An alternative, 16-bit coding: Unicode (UCS-2)
– Java was the first widely used language to use the Unicode character set. Since then, it
has found its way into JavaScript, Python, Perl, C# and F#
– After 1991, the Unicode Consortium, in cooperation with the International Standards
Organization (ISO), developed a 4-byte character code named UCS-4 or UTF-32, which
is described in the ISO/IEC 10646 Standard, published in 2000
CMPS401 Class Notes (Chap06) Page 5 / 35 Dr. Kuo-pao Yang
6.3 Character String Types 242
? A character string type is one in which values are sequences of characters
6.3.1 Design Issues
? The two most important design issues:
– Is it a primitive type or just a special kind of array?
– Is the length of objects static or dynamic?
6.3.2 String and Their Operations
? Typical operations:
– Assignment
– Comparison (=, >, etc.)
– Catenation
– Substring reference
– Pattern matching
? C and C++ use char arrays to store char strings and provide a collection of string operations
through a standard library whose header is string.h
? Character string are terminated with a special character, null, with is represented with zero
? How is the length of the char string decided?
– The null char which is represented with 0
– Ex:
char str[] = “apples”;
? In this example, str is an array of char elements, specifically apples0, where 0 is the
null character
? Some of the most commonly used library functions for character strings in C and C++ are
– strcpy: copy strings
– strcat: catenates on given string onto another
– strcmp:lexicographically compares (the order of their codes) two strings
– strlen: returns the number of characters, not counting the null
? In Java, strings are supported by String class, whose value are constant string, and the
StringBuffer class whose value are changeable and are more like arrays of single characters
? C# and Ruby include string classes that are similar to those of Java
? Python strings are immutable, similar to the String class objects of Java
CMPS401 Class Notes (Chap06) Page 6 / 35 Dr. Kuo-pao Yang
6.3.3 String Length Options
? Static Length String: The length can be static and set when the string is created. This is the
choice for the immutable objects of Java’s String class as well as similar classes in the C++
standard class library and the .NET class library available to C# and F#
? Limited Dynamic Length Strings: allow strings to have varying length up to a declared and
fixed maximum set by the variable’s definition, as exemplified by the strings in C
? Dynamic Length Strings: Allows strings various length with no maximum. This option
requires the overhead of dynamic storage allocation and deallocation but provides flexibility.
Ex: Perl and JavaScript
6.3.4 Evaluation
? Aid to writability
? As a primitive type with static length, they are inexpensive to provide--why not have them?
? Dynamic length is nice, but is it worth the expense?
6.3.5 Implementation of Character String Types
? Static Length String - compile-time descriptor has three fields:
1. Name of the type
2. Type’s length
3. Address of first char
Figure 6.2 Compile-time descriptor for static strings
? Limited Dynamic Length Strings - may need a run-time descriptor for length to store both
the fixed maximum length and the current length (but not in C and C++ because the end of a
string is marked with the null character)
Figure 6.3 Run-time descriptor for limited dynamic strings
CMPS401 Class Notes (Chap06) Page 7 / 35 Dr. Kuo-pao Yang
? Dynamic Length Strings
– Need run-time descriptor because only current length needs to be stored
– Allocation/deallocation is the biggest implementation problem. Storage to which it is
bound must grow and shrink dynamically
– There are three approaches to supporting allocation and deallocation:
4. Strings can be stored in a linked list, so that when a string grows, the newly required
cells can come from anywhere in the heap
? The drawbacks to this method are the extra storage occupied by the links in the
list representation and necessary complexity of string operations0
? String operations are slowed by the required pointer chasing
5. Store strings as arrays of pointer to individual character allocated in the heap
? This method still uses extra memory, but string processing can be faster that with
the linked-list approach
6. Store strings in adjacent storage cells
? “What about when a string grows?” Find a new area of memory and the old part
is moved to this area.
? Allocation and deallocation is slower but using adjacent cells results in faster
string operations and requires less storage. This approach is the one typically
used